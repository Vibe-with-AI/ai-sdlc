import fs from "node:fs";
import path from "node:path";
import { Args, Command } from "@oclif/core";
import { config } from "dotenv";
import * as YAML from "js-yaml";
import { v4 as uuidv4 } from "uuid";
import { invokeProductOwnerAgent } from "../utils/llm.js";

// Load environment variables
config();

export default class Prd extends Command {
	static description =
		"Generate a Product Requirements Document (PRD) from a validated idea.";

	static examples = [
		"<%= config.bin %> <%= command.id %> idea-123",
		"<%= config.bin %> <%= command.id %> my-feature-idea",
	];

	static args = {
		ideaId: Args.string({
			description:
				"The unique identifier of the idea artifact residing in .aisdlc/03_ideas/",
			required: true,
		}),
	};

	async run(): Promise<void> {
		const { args } = await this.parse(Prd);
		const { ideaId } = args;

		try {
			// 1. Validate idea exists and load content
			const ideaPath = path.join(
				process.cwd(),
				".aisdlc/03_ideas",
				`${ideaId}.md`,
			);
			if (!fs.existsSync(ideaPath)) {
				this.error(`Idea file not found: ${ideaPath}`);
			}

			const ideaContent = fs.readFileSync(ideaPath, "utf8");
			this.log(`ðŸ“– Loading idea: ${ideaId}`);

			// 2. Load index.yml to verify idea status
			const indexPath = path.join(process.cwd(), ".aisdlc", "index.yml");
			const indexData: any = fs.existsSync(indexPath)
				? YAML.load(fs.readFileSync(indexPath, "utf8")) || {}
				: {};

			if (!indexData[ideaId]) {
				this.error(`Idea ${ideaId} not found in index.yml`);
			}

			if (
				indexData[ideaId].status !== "idea" &&
				indexData[ideaId].status !== "validated"
			) {
				this.warn(
					`Idea ${ideaId} has status: ${indexData[ideaId].status}. Proceeding anyway.`,
				);
			}

			// 3. Generate PRD using Product Owner Agent
			this.log("ðŸ¤– Invoking Product Owner Agent to generate PRD...");
			const prdContent = await this.generatePrd(ideaContent, ideaId);

			// 4. Save PRD to backlog
			const prdId = `prd-${uuidv4().slice(0, 8)}`;
			const prdPath = path.join(
				process.cwd(),
				".aisdlc/04_backlog",
				`${prdId}.prd.md`,
			);

			// Add YAML frontmatter to PRD
			const prdWithFrontmatter = this.addFrontmatter(prdContent, prdId, ideaId);

			// Ensure the directory exists
			fs.mkdirSync(path.dirname(prdPath), { recursive: true });
			fs.writeFileSync(prdPath, prdWithFrontmatter);
			this.log(`ðŸ“„ PRD saved: ${prdPath}`);

			// 5. Update index.yml
			indexData[prdId] = {
				id: prdId,
				type: "prd",
				status: "backlog",
				title: this.extractTitle(prdContent),
				priority: "medium",
				source_idea_id: ideaId,
				source_file: prdPath,
				created_at: new Date().toISOString(),
				updated_at: new Date().toISOString(),
				owner_agent_type: "ProductOwnerAgent",
			};

			// Update original idea status
			indexData[ideaId].status = "processed";
			indexData[ideaId].updated_at = new Date().toISOString();
			indexData[ideaId].prd_id = prdId;

			fs.writeFileSync(indexPath, YAML.dump(indexData));
			this.log("âœ… Index updated successfully.");

			this.log(`\nðŸŽ‰ PRD generated successfully!`);
			this.log(`PRD ID: ${prdId}`);
			this.log(`Next steps:`);
			this.log(`  - Review the PRD: ${prdPath}`);
			this.log(`  - Validate with: ai validate ${prdId}`);
			this.log(`  - Chunk into features: ai chunk ${prdId}`);
		} catch (error) {
			this.error(
				`Failed to generate PRD: ${error instanceof Error ? error.message : String(error)}`,
			);
		}
	}

	private async generatePrd(
		ideaContent: string,
		ideaId: string,
	): Promise<string> {
		const prompt = `Generate a comprehensive Product Requirements Document (PRD) from the following idea:

IDEA CONTENT:
${ideaContent}

Generate a detailed PRD following this structure:
1. Executive Summary
2. Problem Statement
3. Solution Overview
4. User Personas
5. Functional Requirements
6. Non-Functional Requirements
7. User Stories (high-level)
8. Success Metrics
9. Dependencies
10. Constraints
11. Timeline

Make the PRD specific, actionable, and complete. Include clear acceptance criteria and measurable success metrics.

Format the output as a well-structured markdown document with clear headings and detailed content for each section.`;

		try {
			const context = {
				artifactType: "prd",
				sourceArtifact: ideaId,
				projectContext: "AI-augmented Scrum development workflow",
			};

			const prdContent = await invokeProductOwnerAgent(prompt, context);

			// Add metadata footer
			return `${prdContent}

---
*Generated by Product Owner Agent*
*Source Idea: ${ideaId}*
*Generated: ${new Date().toISOString()}*`;
		} catch (error) {
			this.warn(
				`LLM generation failed, using template: ${error instanceof Error ? error.message : String(error)}`,
			);

			// Fallback to template if LLM fails
			return `# Product Requirements Document

## Executive Summary
This PRD outlines the requirements for implementing the feature described in idea ${ideaId}.

## Problem Statement
[Generated from idea analysis]

## Solution Overview
[High-level solution approach]

## User Personas
[Target user personas and their needs]

## Functional Requirements
[Detailed functional requirements]

## Non-Functional Requirements
[Performance, security, scalability requirements]

## User Stories
[High-level user stories]

## Success Metrics
[KPIs and success criteria]

## Dependencies
[Technical and business dependencies]

## Constraints
[Technical, business, and regulatory constraints]

## Timeline
[High-level timeline and milestones]

---
*Generated by Product Owner Agent*
*Source Idea: ${ideaId}*
*Generated: ${new Date().toISOString()}*
`;
		}
	}

	private addFrontmatter(
		content: string,
		prdId: string,
		ideaId: string,
	): string {
		const frontmatter = {
			id: prdId,
			type: "prd",
			status: "backlog",
			source_idea_id: ideaId,
			created_at: new Date().toISOString(),
			updated_at: new Date().toISOString(),
		};

		return `---
${YAML.dump(frontmatter)}---

${content}`;
	}

	private extractTitle(content: string): string {
		const lines = content.split("\n");
		for (const line of lines) {
			if (line.startsWith("# ")) {
				return line.substring(2).trim();
			}
		}
		return "Untitled PRD";
	}
}
